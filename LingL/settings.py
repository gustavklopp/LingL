"""
Django settings for LingL project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from django.contrib.messages import constants as messages

# For using PyMSQL:
# try:
#     import pymysql
#     pymysql.install_as_MySQLdb()
# except ImportError:
#     pass

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*=vv_9bn%wz4vzvx#1o%0g0#gicxc5crb*z7(j6@b2f=-#g2)i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # needed by django-allauth
    'django.contrib.sites',
    # local
    'lwt',
#     'jchart', # graphical tool to display statistics. Local, because Jchart is outdated(it lacks: the simple "import six")
    # third party
    'tags_input',
    'mathfilters', # allow to do math in template
    'allauth', # django usesr registration /!\WARNING: To override the templates, 'allauth' must appear AFTER the app 'lwt'!
    'allauth.account', # django user registration
    'allauth.socialaccount', # django user registration
    'crispy_forms', # linker between django and bootstrap form. 'pipenv install django-crispy-forms'
#     'sslserver', # use in DEBUG to run https on localhost
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LingL.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
#             os.path.join(BASE_DIR, 'templates'), 
#                 os.path.join(BASE_DIR, 'templates', 'allauth'),
                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` needs this from django
                'django.template.context_processors.request',
            ],
            'debug': True,
        },
    },
]

WSGI_APPLICATION = 'LingL.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# SQLite3 database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'lwt', 'LingL_database.sqlite3'),
    }
}
## MySQL database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'tonicmne_lingl',
#         'USER': 'tonicmne_lingl_user',
#         'PASSWORD': 'gyn2020!',
#         'HOST': 'localhost',
#         'PORT': '',
#         'OPTIONS': {
#             'charset': 'utf8mb4'  
#         }
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# to use cookie-based sessions:
# SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_SAVE_EVERY_REQUEST = True

# Used by the 3rd party app Django-tags-input (creating the tags for Words and Texts)
# (especially in 'text_detail')
def text_get_queryset(*args, **kwargs):
    from lwt.models import Texts
    return Texts.objects.all()
  
def word_get_queryset(*args, **kwargs):
    from lwt.models import Words
    return Words.objects.all()
 
def language_get_queryset(*args, **kwargs):
    from lwt.models import Languages
    return Languages.objects.all()

def texttag_get_queryset(*args, **kwargs):
    owner = kwargs.pop('owner')
    from lwt.models import Texttags
    return Texttags.objects.filter(owner=owner)

TAGS_INPUT_MAPPINGS = { 
                        'lwt.Wordtags':        {'field': 'wotagtext', 'create_missing': False},
#                         'lwt.Words':           {'field': 'wotext'   , 'queryset'      : word_get_queryset},

                        'lwt.Texttags':        {'field': 'txtagtext', 'create_missing': True,
                                                },
#                         'lwt.Texts':           {'field': 'txtitle'  , 'queryset'      : text_get_queryset},

                        'lwt.Extra_field_key': {'field': 'title'    , 'create_missing': True},
                        'lwt.Languages':       {'field': 'title'    , 'queryset'      : language_get_queryset},
                        }
# -- End --#

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)
SITE_ID = 1 # used by django_-allauth

LOGIN_REDIRECT_URL = "/" # used by django_-allauth (redirect after successful login)

CRISPY_TEMPLATE_PACK = 'bootstrap4'
CRISPY_FAIL_SILENTLY = DEBUG

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# overriding templates for form for Django-allauth
ACCOUNT_FORMS = { 'signup': 'lwt.forms.MySignUpForm', 'login': 'lwt.forms.MyLogInForm'}

# overriding the default User:
AUTH_USER_MODEL = 'lwt.MyUser'
# to add custom field which is saved django-allauth
ACCOUNT_ADAPTER = 'lwt.models.UserAccountAdapter'

# used for messages:
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# for sending email
# FOR TESTING
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST, EMAIL_PORT, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD = 'localhost', 1025, None, None

#Temporate solution because bug in django-allauth with Django 3.x "HINT: Configure the DEFAULT_AUTO_FIELD setting "
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

